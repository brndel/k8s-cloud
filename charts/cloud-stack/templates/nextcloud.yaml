apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: nextcloud
spec:
  interval: 1h
  url: https://nextcloud.github.io/helm/
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nextcloud-autoconfig
data:
  setup.sh: |
    #!/bin/bash

    if [ -f ~/autoconf-running ]
    then
      echo "Autoconfig script is already running. Exiting."
      exit 0
    fi

    touch ~/autoconf-running
    trap 'rm ~/autoconf-running' EXIT

    until [[ $(php occ status 2> /dev/null | grep "installed:") =~ "true" ]]; do
      echo 'waiting for nextcloud to start...'
      sleep 5
    done
    echo 'nextcloud is up.'

    echo 'installing apps...'
    for APP in $(cat apps.txt); do
      if ! [[ -d /var/www/html/custom_apps/$APP || -d /var/www/html/apps/$APP ]] ; then
        echo "installing $APP"
        runuser --user www-data -- /var/www/html/occ app:install $APP
      fi
    done
    echo 'installing apps... done'

    echo 'loading config.json...'
    ( echo "cat <<EOF" ; cat config.json ; echo EOF ) | sh > /var/www/html/config.json
    runuser --user www-data -- /var/www/html/occ config:import config.json
    echo 'loading config.json... done'

    echo 'nextcloud all set up.'
  apps.txt: | 
    oidc_login
    onlyoffice
  config.json: |
    {
      "system": {},
      "apps": {
        "onlyoffice": {
          "DocumentServerUrl": {{ printf "https://%s" .Values.hosts.onlyoffice | quote }},
          "jwt_secret": "$OO_JWT_SECRET"
        },
        "files": {
          "default_quota": "1 GB"
        }
      }
    }
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nextcloud-nextcloud
  labels:
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: nextcloud
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nextcloud
    {{- if not .Values.storage.auto_backup }}
    velero.io/exclude-from-backup: "true"
    recurring-job.longhorn.io/source: enabled
    recurring-job.longhorn.io/snapshot-daily: enabled
    {{- end }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.storage.size }}
  storageClassName: {{ not (eq .Values.storage.zone "") | ternary (printf "zone-%s" .Values.storage.zone) (.Values.storage.local | ternary "local" "backbone") }}{{ .Values.storage.encrypted | ternary "-enc" "" }}
  volumeMode: Filesystem
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: nextcloud
spec:
  interval: 1h
  chart:
    spec:
      chart: nextcloud
      version: '4.4.0'
      sourceRef:
        kind: HelmRepository
        name: nextcloud
  timeout: 20m0s
  values:
    # TODO: #55 Deploy multiple nextcloud replicas with RollingUpdate and RWX volume once upstream NFS issue is solved
    # Upstream issue: <https://github.com/nextcloud/helm/issues/399>
    # replicaCount: 2
    {{- if .Values.nginx.enabled }}
    image:
      flavor: fpm
    nginx:
      enabled: true
    {{- end }}
    resources:
      requests:
        cpu: 200m
        memory: 1Gi
    ingress:
      enabled: {{ .Values.ingress }}
      tls:
        - secretName: nextcloud-tls
          hosts:
            - {{ .Values.hosts.nextcloud }}
      annotations:
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 4G
        nginx.ingress.kubernetes.io/enable-cors: "true"
        nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
        nginx.ingress.kubernetes.io/server-snippet: |-
          server_tokens off;
          proxy_hide_header X-Powered-By;

          rewrite ^/.well-known/webfinger /public.php?service=webfinger last;
          rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
          rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
          location = /.well-known/carddav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /.well-known/caldav {
            return 301 $scheme://$host/remote.php/dav;
          }
          location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
          }
          location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
            deny all;
          }
          location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
            deny all;
          }
    nextcloud:
      # strategy:
      #   type: RollingUpdate
      #   rollingUpdate:
      #     maxSurge: 1
      #     maxUnavailable: 1
      host: {{ .Values.hosts.nextcloud }}
      existingSecret:
        enabled: true
        secretName: nextcloud
      mail:
        enabled: true
        fromAddress: {{ index (.Values.smtp.from_address | splitList "@") 0 }}
        domain: {{ index (.Values.smtp.from_address | splitList "@") 1 }}
        smtp:
          port: {{ .Values.smtp.port }}
          secure: ssl
      extraEnv:
        - name: OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oidc-client
              key: secret
        - name: OO_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: onlyofficejwt
              key: JWT_SECRET
        {{- if .Values.s3.enabled }}
        - name: S3_SECRET
          valueFrom:
            secretKeyRef:
              name: s3-access-key
              key: secret
        {{- if .Values.s3.encryption.enabled }}
        - name: S3_ENC_KEY
          valueFrom:
            secretKeyRef:
              name: nextcloud-s3-enc
              key: key
        {{- end }}
        {{- end }}
      configs:
        logging.config.php: |
          <?php
          $CONFIG = array (
            "log_type" => "file",
            "logfile" => "/dev/stdout",
            "loglevel" => {{ .Values.debug | ternary 0 1 }},
          );
          ?>
        oidc.config.php: | 
          <?php
          $CONFIG = array (
            // See here for explanation: https://github.com/pulsejet/nextcloud-oidc-login#config
            'allow_user_to_change_display_name' => false,
            'lost_password_link' => 'disabled',
            'oidc_login_provider_url' => {{ .Values.oidc_client.idp_url | quote }},
            'oidc_login_client_id' => {{ .Values.oidc_client.id | quote }},
            'oidc_login_client_secret' => getenv('OIDC_CLIENT_SECRET'),
            'oidc_login_auto_redirect' => true,
            'oidc_login_logout_url' => {{ printf "https://%s" .Values.hosts.nextcloud | quote }},
            'oidc_login_end_session_redirect' => false,
            'oidc_login_button_text' => {{ printf "%s Login / Signup" .Values.org.name | quote }},
            'oidc_login_hide_password_form' => false,
            'oidc_login_use_id_token' => false,
            'oidc_login_attributes' => array (
                'id' => 'preferred_username',
                'name' => 'name',
                'mail' => 'email',
                'quota' => 'nextcloudQuota',
                'home' => 'homeDirectory',
                'groups' => 'groups',
                'photoURL' => 'picture',
                'is_admin' => 'is_admin',
            ),
            'oidc_login_use_external_storage' => false,
            'oidc_login_scope' => 'openid profile groups email is_admin',
            'oidc_login_proxy_ldap' => false,
            'oidc_login_disable_registration' => false,
            'oidc_login_redir_fallback' => true,
            'oidc_login_tls_verify' => true,
            'oidc_create_groups' => true
          );
          ?>
        locale.config.php: | 
          <?php
          $CONFIG = array (
            'default_locale' => {{ .Values.org.default_locale | quote }},
            'default_phone_region' => {{ not (eq .Values.org.default_phone_region "") | ternary .Values.org.default_phone_region (index (.Values.org.default_locale | splitList "_") 1 | upper) | quote }}
          );
          ?>
        proxy.config.php: | 
          <?php
          $CONFIG = array (
            'trusted_proxies' => array(
              0 => '127.0.0.1',
              1 => '10.42.0.0/16',
              2 => '::1',
              3 => '2001:cafe:42:0::/56'
            ),
            'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
            'overwriteprotocol' => 'https',
          );
          ?>
        {{- if .Values.s3.enabled }}
        s3.config.php: |-
          <?php
          $CONFIG = array (
            'objectstore' => array(
              'class' => '\\OC\\Files\\ObjectStore\\S3',
              'arguments' => array(
                'bucket'     => {{ .Values.s3.bucket | quote }},
                'hostname' => {{ .Values.s3.endpoint | quote }},
                'autocreate' => true,
                'key'        => {{ .Values.s3.access_key_id | quote }},
                'secret'     => getenv('S3_SECRET'),
                'region'     => {{ .Values.s3.region | quote }},
                'use_ssl'    => true,
                {{- if .Values.s3.encryption.enabled }}
                'sse_c_key'  => getenv('S3_ENC_KEY'),
                {{- end }}
              )
            )
          );
          ?>
        {{- end }}
        mail.config.php: | 
          <?php
          $CONFIG = array (
            'mail_smtptimeout' => 30,
          );
          ?>
    {{- if .Values.autoconfig.enabled }}
      extraVolumes:
        - name: autoconfig
          configMap:
            name: nextcloud-autoconfig
      extraVolumeMounts:
        - name: autoconfig
          mountPath: /autoconfig
          readOnly: true
    lifecycle:
      postStartCommand: ["/bin/bash", "-c", "(cd /autoconfig; bash setup.sh)"]
    {{- end }}
    internalDatabase:
      enabled: false
    externalDatabase:
      enabled: true
      existingSecret:
        enabled: true
        secretName: nextcloud-mariadb
        usernameKey: mariadb-username
        passwordKey: mariadb-password
    cronjob:
      enabled: true
    persistence:
      enabled: true
      existingClaim: nextcloud-nextcloud
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      resources:
        requests:
          cpu: 30m
          memory: 32Mi
    redis:
      enabled: true
      auth:
        enabled: true
        existingSecret: nextcloud-redis
        existingSecretPasswordKey: password
      master:
        persistence:
          size: 2Gi
          storageClass: local
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
      architecture: standalone
    mariadb:
      enabled: true
      auth:
        existingSecret: nextcloud-mariadb
      primary:
        persistence:
          enabled: true
          size: 4Gi
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
    {{- if not (eq .Values.storage.zone "") }}
        nodeSelector:
          topology.kubernetes.io/zone: {{ .Values.storage.zone }}
    nodeSelector:
      topology.kubernetes.io/zone: {{ .Values.storage.zone }}
    {{- end }}

{{- if .Values.snapshots.enabled }}
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: {{ printf "nextcloud-%s" (now | date "20060102150405") }}
  annotations:
    "helm.sh/hook": pre-upgrade
spec:
  source:
    persistentVolumeClaimName: nextcloud-nextcloud
  {{- if .Values.snapshots.class_name }}
  volumeSnapshotClassName: {{ .Values.snapshots.class_name }}
  {{- end }}
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: {{ printf "nextcloud-mariadb-%s" (now | date "20060102150405") }}
  annotations:
    "helm.sh/hook": pre-upgrade
spec:
  source:
    persistentVolumeClaimName: data-nextcloud-mariadb-0
  {{- if .Values.snapshots.class_name }}
  volumeSnapshotClassName: {{ .Values.snapshots.class_name }}
  {{- end }}
{{- end }}
