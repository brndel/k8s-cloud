apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-theme-login
data:
  theme.properties: |
    parent=keycloak
    import=common/keycloak
    styles=css/login.css css/styles.css
  styles.css: |
    .login-pf body {
      background: rgb(226, 231, 240);
    }
    {{- if .Values.org.logoURL }}
    div.kc-logo-text {
      background-image: url({{ .Values.org.logoURL }});
      background-size: contain;
      height: 100px;
      background-position: center;
    }
    @media (max-width: 767px) {
      div.kc-logo-text {
        margin: auto;
        width: auto;
        height: 150px;
        margin-bottom: 30px;
      }
      #kc-header-wrapper {
        padding: 20px 0 0 0;
      }
    }
    {{- end }}
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: bitnami
spec:
  interval: 10m
  url: https://charts.bitnami.com/bitnami
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: keycloak
spec:
  interval: 5m
  chart:
    spec:
      chart: keycloak
      version: '^15'
      sourceRef:
        kind: HelmRepository
        name: bitnami
  timeout: 10m0s # Increase timeout to be sure.
  valuesFrom:
    - kind: Secret
      name: smtp-creds
      valuesKey: password
      targetPath: "keycloakConfigCli.configuration.master\\.yaml.smtpServer.password"
  values:
    production: true
    proxy: edge
    auth:
      adminUser: admin
      existingSecret: idp-admin
      password_secretKey: password
    ingress:
      enabled: true
      annotations:
        kubernetes.io/tls-acme: "true"
      hostname: {{ .Values.hosts.keycloak }}
      tls: true
    extraEnvVars:
      - name: KC_FEATURES
        value: 'declarative-user-profile,recovery-codes'
    extraVolumes:
      - name: theme-login
        configMap:
          name: keycloak-theme-login
    extraVolumeMounts:
      - name: theme-login
        mountPath: /opt/k8s-cloud/themes/login
        readOnly: true
    initdbScripts:
      setup_custom_theme.sh: |
        #!/bin/bash

        # Create custom theme folder:

        cd /opt/bitnami/keycloak/themes
        mkdir ./k8s-cloud
        cd ./k8s-cloud

        # Create login theme:

        mkdir ./login
        cd ./login
        cp /opt/k8s-cloud/themes/login/theme.properties ./
        mkdir ./resources
        mkdir ./resources/css
        cp /opt/k8s-cloud/themes/login/styles.css ./resources/css
        cd ..
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      prometheusRule:
        enabled: true
    keycloakConfigCli:
      enabled: true
      extraEnvVars:
        - name: IMPORT_MANAGED_CLIENT
          value: "no-delete" # Do not delete existing clients, just add new ones
        - name: IMPORT_VARSUBSTITUTION_ENABLED
          value: "true"
        - name: LOGGING_LEVEL_HTTP
          value: "debug"
        - name: IDP_CERT
          valueFrom:
            secretKeyRef:
              name: idp-cert
              key: tls.crt
        - name: IDP_CERT_SECRET
          valueFrom:
            secretKeyRef:
              name: idp-cert
              key: tls.key
        - name: CLUSTER_OIDC_SECRET
          valueFrom:
            secretKeyRef:
              name: cluster-oidc
              key: secret
        {{- range $client := .Values.clients.oidc }}
        - name: OIDC_SECRET.{{ $client.id }}
          valueFrom:
            secretKeyRef:
              name: {{ printf "oidc-client.%s" $client.id }}
              key: secret
        {{- end }}
        {{- range $client := .Values.clients.saml }}
        - name: SAML_CERT.{{ $client.id }}
          valueFrom:
            secretKeyRef:
              name: {{ printf "saml-cert.%s" $client.id }}
              key: tls.crt
        {{- end }}
      configuration: 
        master.yaml:
          enabled: true
          realm: master
          registrationAllowed: true
          registrationEmailAsUsername: false
          rememberMe: true
          verifyEmail: true
          loginWithEmailAllowed: true
          duplicateEmailsAllowed: false
          resetPasswordAllowed: true
          editUsernameAllowed: false
          accessTokenLifespan: 600
          accessTokenLifespanForImplicitFlow: 1200
          ssoSessionIdleTimeout: 7200
          ssoSessionMaxLifespan: 86400
          ssoSessionIdleTimeoutRememberMe: 604800
          ssoSessionMaxLifespanRememberMe: 5184000
          offlineSessionIdleTimeout: 5184000
          adminEventsEnabled: true
          adminEventsDetailsEnabled: true
          internationalizationEnabled: true
          defaultLocale: {{ index (.Values.org.default_locale | splitList "_") 0 }}
          displayName: {{ printf "%s Login" .Values.org.name }}
          displayNameHtml: {{ printf "<div class=\"kc-logo-text\"><span>%s Login</span></div>" .Values.org.name }}
          smtpServer:
            port: {{ .Values.smtp.port | quote }}
            host: {{ .Values.smtp.host }}
            {{- if not .Values.smtp.starttls }}
            ssl: 'true'
            {{- else -}}
            starttls: 'true'
            {{- end }}
            auth: 'true'
            from: {{ .Values.smtp.from_address }}
            user: {{ .Values.smtp.user | quote }}
            password: "" # injected
          loginTheme: k8s-cloud
          components:
            org.keycloak.keys.KeyProvider:
              - name: "rsa"
                providerId: "rsa"
                subComponents: {}
                config: 
                  privateKey:
                    - "$(env:IDP_CERT_SECRET)" # from env var
                  certificate:
                    - "$(env:IDP_CERT)" # from env var
                  priority: ["200"] 
                  algorithm: ["RS256"]
              - name: "aes-generated"
                providerId: "aes-generated"
                subComponents: {}
                config: 
                  priority: ["100"]
              - name: "rsa-enc-generated"
                providerId: "rsa-enc-generated"
                subComponents: {}
                config: 
                  priority: ["100"]
                  algorithm: ["RSA-OAEP"]
              - name: "hmac-generated"
                providerId: "hmac-generated"
                subComponents: {}
                config: 
                  priority: ["100"]
                  algorithm: ["HS256"]
          groups: 
            - name: {{ .Values.admin_group | quote }}
              realmRoles: 
                - admin
              attributes:
                is_admin: ["true"]
          users:
            - username: admin
              enabled: true
              email: {{ .Values.admin_email }}
              emailVerified: true
              requiredActions: []
              realmRoles:
                - admin
                - create-realm
                - default-roles-master
              groups:
                - {{ .Values.admin_group | quote }}
          clientScopes:
            - name: groups
              protocol: openid-connect
              attributes:
                display.on.consent.screen: "true"
                include.in.token.scope": "true"
              protocolMappers:
                - name: groups
                  protocol: openid-connect
                  protocolMapper: oidc-group-membership-mapper
                  config: 
                    full.path: "false"
                    id.token.claim: "true"
                    access.token.claim: "true"
                    userinfo.token.claim: "true"
                    claim.name: groups
            - name: is_admin
              protocol: openid-connect
              attributes:
                display.on.consent.screen: "true"
                include.in.token.scope": "true"
              protocolMappers:
                - name: is_admin
                  protocol: openid-connect
                  protocolMapper: oidc-usermodel-attribute-mapper
                  consentRequired: false
                  config:
                    userinfo.token.claim: 'true'
                    user.attribute: is_admin
                    id.token.claim: 'true'
                    access.token.claim: 'true'
                    claim.name: is_admin
                    jsonType.label: boolean
                    multivalued: 'false'
                    aggregate.attrs: ''
          clients: 
            - clientId: {{ .Values.cluster_client.id }}
              name: {{ .Values.cluster_client.id }}
              description: "Cluster OIDC client"
              enabled: true
              clientAuthenticatorType: client-secret
              secret: "$(env:CLUSTER_OIDC_SECRET)" # from env var
              redirectUris:
                - "https://{{ .Values.hosts.authproxy }}/oauth2/callback"
                - "http://localhost:8000/"
              {{- range $uri := .Values.cluster_client.redirect_uris }}
                - {{ $uri }}
              {{- end }}
              webOrigins: 
                - "*"
              defaultClientScopes:
                - email
                - profile
                - groups
              optionalClientScopes:
                - roles
                - is_admin
                - offline_access
            {{- range $client := .Values.clients.oidc }}
            - clientId: {{ $client.id }}
              name: {{ $client.id }}
              description: "Internal OIDC client"
              enabled: true
              clientAuthenticatorType: client-secret
              secret: "$(env:OIDC_SECRET.{{ $client.id }})" # from env var
              redirectUris: 
              {{- range $uri := $client.redirect_uris }}
                - {{ $uri }}
              {{- end }}
              webOrigins: 
                - "*"
              defaultClientScopes:
                - email
                - profile
              optionalClientScopes:
                - groups
                - roles
                - is_admin
                - offline_access
            {{- end }}
            {{- range $client := .Values.clients.saml }}
            - clientId: {{ $client.id }}
              protocol: saml
              name: {{ $client.id }}
              description: "Internal SAML client"
              enabled: true
              rootUrl: {{ $client.root_url }}
              redirectUris: 
                - "*"
              webOrigins: 
                - "*"
              frontchannelLogout: true
              attributes:
                saml.signing.certificate: "$(env:SAML_CERT.{{ $client.id }})" # from env var
                saml.client.signature: "true"
                saml.force.post.binding: "false"
                saml.signature.algorithm: RSA_SHA256
                saml.assertion.signature: "true"
                saml_name_id_format: email
                {{ if eq $client.assertion_consumer.method "post" -}}
                saml_assertion_consumer_url_post: {{ $client.assertion_consumer.url }}
                {{ end -}}
                {{ if eq $client.assertion_consumer.method "redirect" -}}
                saml_assertion_consumer_url_redirect: {{ $client.assertion_consumer.url }}
                {{ end -}}
                {{ if $client.logout_service -}}
                {{ if eq $client.logout_service.method "post" -}}
                saml_single_logout_service_url_post: {{ $client.logout_service.url }}
                {{ end -}}
                {{ if eq $client.logout_service.method "redirect" -}}
                saml_single_logout_service_url_redirect: {{ $client.logout_service.url }}
                {{- end }}
                {{- end }}
              protocolMappers:
                - name: name-id
                  protocol: saml
                  protocolMapper: saml-user-attribute-nameid-mapper
                  consentRequired: false
                  config:
                    mapper.nameid.format: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified
                    user.attribute: email
                - name: firstName
                  protocol: saml
                  protocolMapper: saml-user-attribute-mapper
                  config:
                    attribute.nameformat: Basic
                    user.attribute: firstName
                    attribute.name: cn
                - name: "X500 email"
                  protocol: saml
                  protocolMapper: saml-user-property-mapper
                  config:
                    attribute.name: urn:oid:1.2.840.113549.1.9.1
                    attribute.nameformat: urn:oasis:names:tc:SAML:2.0:attrname-format:uri
                    friendly.name: email
                    user.attribute: email
                - name: "X500 givenName"
                  protocol: saml
                  protocolMapper: saml-user-property-mapper
                  config:
                    attribute.name: urn:oid:2.5.4.42
                    attribute.nameformat: urn:oasis:names:tc:SAML:2.0:attrname-format:uri
                    friendly.name: givenName
                    user.attribute: firstName
                - name: "X500 surname"
                  protocol: saml
                  protocolMapper: saml-user-property-mapper
                  config:
                    attribute.name: urn:oid:2.5.4.4
                    attribute.nameformat: urn:oasis:names:tc:SAML:2.0:attrname-format:uri
                    friendly.name: surname
                    user.attribute: lastName
            {{- end }}
