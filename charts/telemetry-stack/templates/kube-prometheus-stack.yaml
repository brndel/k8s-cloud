{{- if not .Values.bootstrap }}
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: prometheus-community
spec:
  interval: 1h
  url: https://prometheus-community.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "^46"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  timeout: '10m0s' # Account for slow performance of cluster on first setup.
  valuesFrom:
    - kind: Secret
      name: smtp-creds
      valuesKey: password
      targetPath: "grafana.grafana\\.ini.smtp.password"
    - kind: Secret
      name: oidc-client
      valuesKey: secret
      targetPath: "grafana.grafana\\.ini.auth\\.generic_oauth.client_secret"
  values:
    prometheusOperator:
      admissionWebhooks:
        timeoutSeconds: 30 # Prevent timeouts during helm upgrade
    prometheus:
      prometheusSpec:
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 8Gi
        retention: 7d
    grafana:
      admin:
        existingSecret: grafana-admin
        userKey: username
        passwordKey: password
      grafana.ini:
        server:
          root_url: {{ printf "https://%s" .Values.host }}
        smtp:
          enabled: true
          host: {{ printf "%s:%s" .Values.smtp.host .Values.smtp.port | quote }}
          user: {{ .Values.smtp.user }}
          password: "" # injected
          from_address: {{ .Value.smtp.fromAddress }}
        auth:
          oauth_auto_login: true
          disable_login_form: true
        auth.generic_oauth:
          # See: https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/
          enabled: true
          name: Admin OIDC
          client_id: {{ .Values.oidcClient.id }}
          client_secret: "" # injected
          scopes: openid,profile,email,groups
          auth_url: {{ printf "%s/auth" .Values.oidcClient.idpURL | quote }}
          token_url: {{ printf "%s/token" .Values.oidcClient.idpURL | quote }}
          api_url: {{ printf "%s/userinfo" .Values.oidcClient.idpURL | quote }}
          allow_sign_up: true
          allowed_groups: {{ .Values.adminGroup | quote }}
          role_attribute_path: "contains(groups[*], {{ .Values.adminGroup | squote }}) && 'Admin' || 'Viewer'"
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: {{ .Values.clusterIssuer }}
          external-dns.alpha.kubernetes.io/managed-by: {{ .Values.externalDNSManager }}
        hosts:
          - {{ .Values.host }}
        tls:
          - hosts:
              - {{ .Values.host }}
            secretName: grafana-cert
      persistence:
        enabled: true
      alerting:
        rules.yaml:
          apiVersion: 1
          groups:
            - orgId: 1
              name: default
              folder: default
              interval: 60s
              rules:
                - uid: flux-reconcile-fail
                  title: Flux Reconcile Fail
                  condition: C
                  data:
                    - refId: A
                      queryType: ''
                      relativeTimeRange:
                        from: 600
                        to: 0
                      datasourceUid: prometheus
                      model:
                        editorMode: builder
                        expr: max by(exported_namespace, name, kind) (gotk_reconcile_condition{type="Ready",
                          status="False"})
                        hide: false
                        intervalMs: 1000
                        legendFormat: __auto
                        maxDataPoints: 43200
                        range: true
                        refId: A
                    - refId: B
                      queryType: ''
                      relativeTimeRange:
                        from: 0
                        to: 0
                      datasourceUid: __expr__
                      model:
                        conditions:
                        - evaluator:
                            params:
                            - 0
                            - 0
                            type: gt
                          operator:
                            type: and
                          query:
                            params: []
                          reducer:
                            params: []
                            type: avg
                          type: query
                        datasource:
                          name: Expression
                          type: __expr__
                          uid: __expr__
                        expression: A
                        intervalMs: 1000
                        maxDataPoints: 43200
                        reducer: max
                        refId: B
                        type: reduce
                    - refId: C
                      queryType: ''
                      relativeTimeRange:
                        from: 0
                        to: 0
                      datasourceUid: __expr__
                      model:
                        conditions:
                        - evaluator:
                            params:
                            - 0
                            - 0
                            type: gt
                          operator:
                            type: and
                          query:
                            params: []
                          reducer:
                            params: []
                            type: avg
                          type: query
                        datasource:
                          name: Expression
                          type: __expr__
                          uid: __expr__
                        expression: B
                        intervalMs: 1000
                        maxDataPoints: 43200
                        refId: C
                        type: threshold
                  dashboardUid: flux-cluster
                  panelId: 28
                  noDataState: NoData
                  for: 600s
                  annotations:
                    runbook_url: "https://fluxcd.io/flux/cheatsheets/troubleshooting/"
                  labels:
                    severity: critical
        contactpoints.yaml:
          apiVersion: 1
          contactPoints:
            - orgId: 1
              name: default
              receivers:
                - uid: default-email-receiver
                  type: email
                  settings:
                    addresses: {{ .Values.adminEmail }}
                    singleEmail: true
    alertmanager:
      enabled: true
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
type: Opaque
data:
  username: {{ "admin" | b64enc | quote }}
  password: {{ include "common.secrets.passwords.manage" (dict "secret" "grafana-admin" "key" "password" "providedValues" (list "") "context" $) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: smtp-creds
type: Opaque
data:
  {{- $passRef := .Values.smtp.passwordSecret }}
  password: {{ (lookup "v1" "Secret" (default .Release.Namespace $passRef.namespace) $passRef.name).data | index $passRef.key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: oidc-client
type: Opaque
data:
  {{- $secretRef := .Values.oidcClient.secret }}
  secret: {{ (lookup "v1" "Secret" (default .Release.Namespace $secretRef.namespace) $secretRef.name).data | index $secretRef.key }}
---
{{- end }}
