{{- if and .Values.encryption (not .Values.vcluster) }}
# VCluster storage class is synced to host, where it references the
# already existing storage secrets of the equally-named class.
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}
data:
  CRYPTO_KEY_VALUE: {{ include "common.secrets.passwords.manage" (dict "secret" .Release.Name "key" "CRYPTO_KEY_VALUE" "providedValues" (list "") "length" 16 "context" $) }}
  CRYPTO_KEY_PROVIDER: {{ "secret" | b64enc }}
  CRYPTO_KEY_CIPHER: {{ "aes-xts-plain64" | b64enc }}
  CRYPTO_KEY_HASH: {{ "sha256" | b64enc }}
  CRYPTO_KEY_SIZE: {{ "256" | b64enc }}
  CRYPTO_PBKDF: {{ "argon2i" | b64enc }}
---
{{- end }}
{{- $name := default (printf "%s-%s" .Release.Name .Release.Namespace) .Values.class_name }}
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: {{ $name }}
  {{- if .Values.default }}
  annotations:
    "storageclass.kubernetes.io/is-default-class": "true"
  {{- end }}
provisioner: driver.longhorn.io
allowVolumeExpansion: true
parameters:
  {{- if .Values.selector }}
  nodeSelector: {{ .Values.selector }}
  {{- end }}
  numberOfReplicas: "2"
  dataLocality: best-effort
  staleReplicaTimeout: "2880" # 48 hours in minutes
  fromBackup: ""
  {{- if .Values.encryption }}
  encrypted: "true"
  # global secret that contains the encryption key that will be used for all volumes
  csi.storage.k8s.io/provisioner-secret-name: {{ $name }}
  csi.storage.k8s.io/provisioner-secret-namespace: {{ .Release.Namespace }}
  csi.storage.k8s.io/node-publish-secret-name: {{ $name }}
  csi.storage.k8s.io/node-publish-secret-namespace: {{ .Release.Namespace }}
  csi.storage.k8s.io/node-stage-secret-name: {{ $name }}
  csi.storage.k8s.io/node-stage-secret-namespace: {{ .Release.Namespace }}
  {{- end }}
