apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: OCIRepository
metadata:
  name: bitnami-postgres
spec:
  interval: 1h
  url: oci://registry-1.docker.io/bitnamicharts/postgresql
  ref:
    semver: '^16.7.20'
---
apiVersion: v1
kind: Secret
metadata:
  name: teable-postgres
type: Opaque
data:
  user-password: {{ include "common.secrets.passwords.manage" (dict "secret" "teable-postgres" "key" "user-password" "providedValues" (list "") "length" 16 "context" $) }}
  postgres-password: {{ include "common.secrets.passwords.manage" (dict "secret" "teable-postgres" "key" "postgres-password" "providedValues" (list "") "length" 16 "context" $) }}
  replication-password: {{ include "common.secrets.passwords.manage" (dict "secret" "teable-postgres" "key" "replication-password" "providedValues" (list "") "length" 16 "context" $) }}
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: teable-postgres
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: bitnami-postgres
  values:
    global:
      postgresql:
        auth:
          username: teable
          database: teable
          existingSecret: teable-postgres
          secretKeys:
            userPasswordKey: user-password
            adminPasswordKey: postgres-password
            replicationPasswordKey: replication-password
    primary:
      nodeSelector:
        {{- if not (eq .Values.zone "") }}
        topology.kubernetes.io/zone: {{ .Values.zone }}
        {{- else }}
        backbone: "1"
        {{- end }}
      persistence:
        size: 4Gi
        storageClass: ha
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
---
{{- if .Values.redis.enabled }}
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: OCIRepository
metadata:
  name: bitnami-redis
spec:
  interval: 1h
  url: oci://registry-1.docker.io/bitnamicharts/redis
  ref:
    semver: '^21.2.12'
---
apiVersion: v1
kind: Secret
metadata:
  name: teable-redis
type: Opaque
data:
  password: {{ include "common.secrets.passwords.manage" (dict "secret" "teable-redis" "key" "password" "providedValues" (list "") "length" 16 "context" $) }}
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: teable-redis
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: bitnami-redis
  values:
    fullnameOverride: teable-redis
    architecture: standalone
    auth:
      existingSecret: teable-redis
      existingSecretPasswordKey: password
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    master:
      nodeSelector:
        {{- if not (eq .Values.zone "") }}
        topology.kubernetes.io/zone: {{ .Values.zone }}
        {{- else }}
        backbone: "1"
        {{- end }}
      persistence:
        size: 2Gi
        storageClass: local
      resources:
        requests:
          memory: 128Mi
          cpu: 30m
---
{{- end }}
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sso-clients
spec:
  interval: 1h
  chart:
    spec:
      chart: sso-clients
      version: "^0.1.8"
      sourceRef:
        kind: HelmRepository
        name: base-config-repo
        namespace: flux-system
  values:
    oidc:
      id: teable
      redirect_uris:
        - {{ printf "https://%s/api/auth/oidc/callback" .Values.host }}
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: teable-urls
spec:
  interval: 1h
  chart:
    spec:
      chart: teable-urls
      version: "^0.1.0"
      sourceRef:
        kind: HelmRepository
        name: base-config-repo
        namespace: flux-system
  dependsOn:
    - name: sso-clients
  valuesFrom:
    - kind: ConfigMap
      name: sso-keycloak
      valuesKey: url
      targetPath: "oidc.issuer_url"
  values:
    redis:
      enabled: {{ .Values.redis.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: teable-smtp
type: Opaque
data:
  {{- $passRef := .Values.smtp.password_secret }}
  password: {{ get ((lookup "v1" "Secret" (default .Release.Namespace $passRef.namespace) $passRef.name).data) $passRef.key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: teable
type: Opaque
data:
  jwt-secret: {{ include "common.secrets.passwords.manage" (dict "secret" "teable" "key" "jwt-secret" "providedValues" (list "") "length" 32 "context" $) }}
  session-secret: {{ include "common.secrets.passwords.manage" (dict "secret" "teable" "key" "session-secret" "providedValues" (list "") "length" 20 "context" $) }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: teable-data
  annotations:
    helm.sh/resource-policy: "keep"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "4Gi"
  storageClassName: ha
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: teable
  labels:
    app: teable
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: teable
  template:
    metadata:
      labels:
        app: teable
    spec:
      hostname: teable
      nodeSelector:
        {{- if not (eq .Values.zone "") }}
        topology.kubernetes.io/zone: {{ .Values.zone }}
        {{- else }}
        backbone: "1"
        {{- end }}
      containers:
        - name: teable
          image: ghcr.io/teableio/teable:latest
          ports:
            - name: http
              containerPort: 3000
          env:
            - name: PUBLIC_ORIGIN
              value: {{ printf "https://%s" .Values.host }}
            - name: BACKEND_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: teable
                  key: jwt-secret
            - name: BACKEND_SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: teable
                  key: session-secret
            - name: PRISMA_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: teable-urls
                  key: postgres
            - name: BACKEND_CACHE_PROVIDER
              value: redis
            - name: BACKEND_CACHE_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: teable-urls
                  key: redis
            - name: SOCIAL_AUTH_PROVIDERS
              value: oidc
            - name: BACKEND_OIDC_CLIENT_ID
              value: teable
            - name: BACKEND_OIDC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: oidc-client.teable
                  key: secret
            - name: BACKEND_OIDC_CALLBACK_URL
              value: {{ printf "https://%s/api/auth/oidc/callback" .Values.host }}
            - name: BACKEND_OIDC_ISSUER
              valueFrom:
                configMapKeyRef:
                  name: sso-keycloak
                  key: url
            - name: BACKEND_OIDC_USER_INFO_URL
              valueFrom:
                secretKeyRef:
                  name: teable-urls
                  key: oidc_userinfo
            - name: BACKEND_OIDC_AUTHORIZATION_URL
              valueFrom:
                secretKeyRef:
                  name: teable-urls
                  key: oidc_auth
            - name: BACKEND_OIDC_TOKEN_URL
              valueFrom:
                secretKeyRef:
                  name: teable-urls
                  key: oidc_token
            - name: BACKEND_MAIL_HOST
              value: {{ .Values.smtp.host }}
            - name: BACKEND_MAIL_PORT
              value: {{ .Values.smtp.port | quote }}
            - name: BACKEND_MAIL_SECURE
              value: "true"
            - name: BACKEND_MAIL_AUTH_USER
              value: {{ .Values.smtp.user }}
            - name: BACKEND_MAIL_AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: teable-smtp
                  key: password
            - name: BACKEND_MAIL_SENDER
              value: {{ .Values.smtp.from_address }}
            - name: BACKEND_MAIL_SENDER_NAME
              value: Teable
          resources:
            requests:
              cpu: 200m
              memory: 400Mi
            limits:
              cpu: 2000m
              memory: 4096Mi
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          volumeMounts:
            - name: data
              mountPath: "/app/.assets"
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: teable-data
---
apiVersion: v1
kind: Service
metadata:
  name: teable
spec:
  type: ClusterIP
  selector:
    app: teable
  ports:
    - port: 80
      targetPort: http
      name: http
{{- if .Values.ingress }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: teable
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 1G
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
spec:
  tls:
    - hosts:
        - {{ .Values.host }}
      secretName: teable-cert
  rules:
    - host: {{ .Values.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: teable
                port:
                  name: http
{{- end }}
{{- if .Values.snapshots.enabled }}
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: {{ printf "teable-data-%s" (now | date "20060102150405") }}
  annotations:
    "helm.sh/hook": pre-upgrade
spec:
  source:
    persistentVolumeClaimName: teable-data
  {{- if .Values.snapshots.class_name }}
  volumeSnapshotClassName: {{ .Values.snapshots.class_name }}
  {{- end }}
{{- end }}
