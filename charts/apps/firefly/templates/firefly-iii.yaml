apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: bitnami
spec:
  interval: 1h
  url: https://charts.bitnami.com/bitnami
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: firefly
spec:
  interval: 1h
  url: https://firefly-iii.github.io/kubernetes
---
apiVersion: v1
kind: Secret
metadata:
  name: smtp
type: Opaque
data:
  {{- $passRef := .Values.smtp.password_secret }}
  password: {{ get ((lookup "v1" "Secret" (default .Release.Namespace $passRef.namespace) $passRef.name).data) $passRef.key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: firefly-postgres
type: Opaque
data:
  postgres-password: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly-postgres" "key" "postgres-password" "providedValues" (list "") "context" $) }}
  password: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly-postgres" "key" "password" "providedValues" (list "") "context" $) }}
  replication-password: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly-postgres" "key" "replication-password" "providedValues" (list "") "context" $) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: firefly-redis
type: Opaque
data:
  password: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly-redis" "key" "password" "providedValues" (list "") "context" $) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: firefly
type: Opaque
data:
  APP_PASSWORD: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly" "key" "APP_PASSWORD" "providedValues" (list "") "length" 16 "context" $) }}
  APP_KEY: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly" "key" "APP_KEY" "providedValues" (list "") "length" 32 "context" $) }}
  STATIC_CRON_TOKEN: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly" "key" "STATIC_CRON_TOKEN" "providedValues" (list "") "length" 32 "context" $) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: firefly-auto-import
type: Opaque
data:
  secret: {{ include "common.secrets.passwords.manage" (dict "secret" "firefly-auto-import" "key" "secret" "providedValues" (list "") "length" 16 "context" $) }}
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: firefly-postgres
spec:
  interval: 1h
  chart:
    spec:
      chart: postgresql
      version: "^13"
      sourceRef:
        kind: HelmRepository
        name: bitnami
  timeout: 10m0s
  values:
    fullnameOverride: firefly-postgres
    auth:
      database: firefly
      username: firefly
      existingSecret: firefly-postgres
    global:
      storageClass: {{ (eq .Values.zone "") | ternary "ha-backbone" (printf "ha-zone-%s" .Values.zone) }}
    primary:
      nodeSelector:
        {{- if not (eq .Values.zone "") }}
        topology.kubernetes.io/zone: {{ .Values.zone }}
        {{- else }}
        backbone: "1"
        {{- end }}
      persistence:
        size: 4Gi
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: firefly-redis
spec:
  interval: 1h
  chart:
    spec:
      chart: redis
      version: "^18.4.0"
      sourceRef:
        kind: HelmRepository
        name: bitnami
  timeout: 10m0s
  values:
    fullnameOverride: firefly-redis
    architecture: standalone
    auth:
      existingSecret: firefly-redis
      existingSecretPasswordKey: password
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    master:
      nodeSelector:
        {{- if not (eq .Values.zone "") }}
        topology.kubernetes.io/zone: {{ .Values.zone }}
        {{- else }}
        backbone: "1"
        {{- end }}
      persistence:
        size: 2Gi
        storageClass: local
      resources:
        requests:
          memory: 128Mi
          cpu: 100m
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: firefly
spec:
  interval: 1h
  chart:
    spec:
      chart: firefly-iii
      version: "^1.5.0"
      sourceRef:
        kind: HelmRepository
        name: firefly
  timeout: 15m0s
  values:
    fullnameOverride: firefly
    nodeSelector:
      {{- if not (eq .Values.zone "") }}
      topology.kubernetes.io/zone: {{ .Values.zone }}
      {{- else }}
      backbone: "1"
      {{- end }}
    persistence:
      size: 4Gi
      storageClassName: {{ (eq .Values.zone "") | ternary "ha-backbone" (printf "ha-zone-%s" .Values.zone) }}
    replicaCount: 1
    config:
      existingSecret: firefly
      envValueFrom:
        DB_PASSWORD:
          secretKeyRef:
            name: firefly-postgres
            key: password
        REDIS_PASSWORD:
          secretKeyRef:
            name: firefly-redis
            key: password
        MAIL_PASSWORD:
          secretKeyRef:
            name: smtp
            key: password
      env:
        DB_HOST: firefly-postgres

        DEFAULT_LANGUAGE: {{ .Values.org.default_locale }}
        DEFAULT_LOCALE: "equal"
        TZ: "Europe/Amsterdam"

        SITE_OWNER: {{ .Values.admin_email }}

        CACHE_DRIVER: redis
        SESSION_DRIVER: redis
        REDIS_HOST: firefly-redis

        MAIL_MAILER: smtp
        MAIL_HOST: {{ .Values.smtp.host }}
        MAIL_PORT: {{ .Values.smtp.port | quote }}
        MAIL_FROM: {{ .Values.smtp.from_address }}
        MAIL_USERNAME: {{ .Values.smtp.user | quote }}
        MAIL_ENCRYPTION: ssl

        ENABLE_EXTERNAL_MAP: true
        ENABLE_EXTERNAL_RATES: true
        ALLOW_WEBHOOKS: true

        AUTHENTICATION_GUARD: remote_user_guard
        AUTHENTICATION_GUARD_HEADER: X-Auth-Request-Email
    ingress:
      enabled: {{ .Values.ingress }}
      annotations:
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 1G
        nginx.ingress.kubernetes.io/auth-response-headers: "Authorization, X-Auth-Request-User, X-Auth-Request-Groups, X-Auth-Request-Email, X-Auth-Request-Preferred-Username, X-Auth-Request-Access-Token"
        nginx.ingress.kubernetes.io/auth-signin: {{ printf "https://%s/oauth2/start?rd=$scheme%%3A%%2F%%2F$host$escaped_request_uri" .Values.oauth2_proxy_host }}
        nginx.ingress.kubernetes.io/auth-url: {{ printf "https://%s/oauth2/auth" .Values.oauth2_proxy_host }}
      hosts:
        - {{ .Values.hosts.firefly }}
      tls:
       - secretName: firefly-tls
         hosts:
           - {{ .Values.hosts.firefly }}
    cronjob:
      enabled: true
      auth:
        existingSecret: firefly
        secretKey: STATIC_CRON_TOKEN
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: firefly-importer
spec:
  interval: 1h
  chart:
    spec:
      chart: importer
      version: "^1.3.1"
      sourceRef:
        kind: HelmRepository
        name: firefly
  timeout: 15m0s
  values:
    fullnameOverride: firefly-importer
    nodeSelector:
      {{- if not (eq .Values.zone "") }}
      topology.kubernetes.io/zone: {{ .Values.zone }}
      {{- else }}
      backbone: "1"
      {{- end }}
    replicaCount: 1
    fireflyiii:
      url: "http://firefly"
      vanityUrl: {{ printf "https://%s" .Values.hosts.firefly }}
    config:
      existingSecret: ""
      envValueFrom:
        AUTO_IMPORT_SECRET:
          secretKeyRef:
            name: firefly-auto-import
            key: secret
        MAIL_PASSWORD:
          secretKeyRef:
            name: smtp
            key: password
        {{- if .Values.nordigen.enabled }}
        NORDIGEN_KEY:
          secretKeyRef:
            name: {{ .Values.nordigen.key_secret_ref.name }}
            key: {{ .Values.nordigen.key_secret_ref.key }}
        {{- end }}
        {{- if .Values.spectre.enabled }}
        SPECTRE_SECRET:
          secretKeyRef:
            name: {{ .Values.spectre.secret_ref.name }}
            key: {{ .Values.spectre.secret_ref.key }}
        {{- end }}
      env:
        {{- if .Values.nordigen.enabled }}
        NORDIGEN_ID: {{ .Values.nordigen.id }}
        NORDIGEN_SANDBOX: {{ .Values.nordigen.sandbox }}
        {{- end }}
        {{- if .Values.spectre.enabled }}
        SPECTRE_APP_ID: {{ .Values.spectre.id }}
        {{- end }}

        CAN_POST_AUTOIMPORT: true
        CAN_POST_FILES: true

        MAIL_MAILER: smtp
        MAIL_HOST: {{ .Values.smtp.host }}
        MAIL_PORT: {{ .Values.smtp.port | quote }}
        MAIL_FROM: {{ .Values.smtp.from_address }}
        MAIL_USERNAME: {{ .Values.smtp.user | quote }}
        MAIL_ENCRYPTION: ssl
    ingress:
      enabled: {{ .Values.ingress }}
      annotations:
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/proxy-body-size: 1G
        nginx.ingress.kubernetes.io/auth-response-headers: "Authorization, X-Auth-Request-User, X-Auth-Request-Groups, X-Auth-Request-Email, X-Auth-Request-Preferred-Username, X-Auth-Request-Access-Token"
        nginx.ingress.kubernetes.io/auth-signin: {{ printf "https://%s/oauth2/start?rd=$scheme%%3A%%2F%%2F$host$escaped_request_uri" .Values.oauth2_proxy_host }}
        nginx.ingress.kubernetes.io/auth-url: {{ printf "https://%s/oauth2/auth?allowed_groups=%s" .Values.oauth2_proxy_host .Values.admin_group }}
      hosts:
        - {{ .Values.hosts.importer }}
      tls:
       - secretName: firefly-importer-tls
         hosts:
           - {{ .Values.hosts.importer }}

{{- if .Values.snapshots.enabled }}
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: {{ printf "firefly-%s" (now | date "20060102150405") }}
  annotations:
    "helm.sh/hook": pre-upgrade
spec:
  source:
    persistentVolumeClaimName: firefly
  {{- if .Values.snapshots.class_name }}
  volumeSnapshotClassName: {{ .Values.snapshots.class_name }}
  {{- end }}
---
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: {{ printf "firefly-postgres-%s" (now | date "20060102150405") }}
  annotations:
    "helm.sh/hook": pre-upgrade
spec:
  source:
    persistentVolumeClaimName: data-firefly-postgres-0
  {{- if .Values.snapshots.class_name }}
  volumeSnapshotClassName: {{ .Values.snapshots.class_name }}
  {{- end }}
{{- end }}
