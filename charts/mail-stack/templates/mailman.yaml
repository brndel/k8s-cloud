{{- $pg_admin_pw := include "common.secrets.passwords.manage" (dict "secret" "postgresql-passwords" "key" "postgres-password" "providedValues" (list "") "context" $) -}}
{{- $pg_user_pw := include "common.secrets.passwords.manage" (dict "secret" "postgresql-passwords" "key" "password" "providedValues" (list "") "context" $) -}}
{{- $pg_repl_pw := include "common.secrets.passwords.manage" (dict "secret" "postgresql-passwords" "key" "replication-password" "providedValues" (list "") "context" $) -}}
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-passwords
type: Opaque
data:
  postgres-password: {{ $pg_admin_pw }}
  password: {{ $pg_user_pw }}
  replication-password: {{ $pg_repl_pw }}
---
apiVersion: v1
kind: Secret
metadata:
  name: hyperkitty-key
type: Opaque
data:
  api-key: {{ include "common.secrets.passwords.manage" (dict "secret" "hyperkitty-key" "key" "api-key" "providedValues" (list "") "context" $) }}
---
{{ $mailman_admin_pw := include "common.secrets.passwords.manage" (dict "secret" "mailman-admin" "key" "password" "providedValues" (list "") "context" $) -}}
{{ $mailman_admin_auth := printf "restadmin:%s" $mailman_admin_pw | b64enc -}}
apiVersion: v1
kind: Secret
metadata:
  name: mailman-admin
type: Opaque
data:
  password: {{ $mailman_admin_pw }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mailman-core-config
data:
  # Config reference: https://docs.mailman3.org/projects/mailman/en/latest/src/mailman/config/docs/config.html
  mailman-extra.cfg: |
    [mailman]
    site_owner: {{ .Values.admin.email }}

    # Redirect all file-based logging to stdout and stderr.
    [logging.template]
    format: %(asctime)s (%(process)d) %(message)s
    datefmt: %b %d %H:%M:%S %Y
    propagate: no
    level: info
    path: /dev/stdout

    [logging.bounce]
    path: /dev/stdout

    [logging.debug]
    path: /dev/null

    [logging.plugins]
    path: /dev/stdout

    [logging.smtp]
    path: /dev/stdout
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: bitnami
spec:
  interval: 60m
  url: https://charts.bitnami.com/bitnami
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: postgresql
spec:
  interval: 5m
  chart:
    spec:
      chart: postgresql
      version: '^12'
      sourceRef:
        kind: HelmRepository
        name: bitnami
  values:
    auth:
      username: mailman
      database: mailman
      existingSecret: postgresql-passwords
---
apiVersion: v1
kind: Service
metadata:
  name: mailman-core
spec:
  type: ClusterIP
  selector:
    app: mailman-core
  ports:
    - port: 80
      targetPort: api
      name: api
    - port: 8024
      targetPort: lmtp
      name: lmtp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailman-core
  labels:
    app: mailman-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mailman-core
  template:
    metadata:
      labels:
        app: mailman-core
    spec:
      hostname: mailman-core
      securityContext:
        runAsUser: 100 # should resolve to "mailman" user, may be unstable.
      initContainers:
        - name: copy
          image: busybox:1
          command: ["/bin/sh", "-c", "cp /opt/mailman-config/* /opt/mailman"]
          volumeMounts:
            - mountPath: "/opt/mailman-config"
              name: config
            - mountPath: "/opt/mailman/"
              name: data
      containers:
        - name: mailman-core
          image: maxking/mailman-core:0.4
          env:
            - name: DATABASE_URL
              value: {{ printf "postgresql://mailman:%s@postgresql/mailman" (b64dec $pg_user_pw) }}
            - name: DATABASE_TYPE
              value: postgres
            - name: DATABASE_CLASS
              value: "mailman.database.postgresql.PostgreSQLDatabase"
            - name: HYPERKITTY_URL
              value: "http://mailman-web/hyperkitty"
            - name: HYPERKITTY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: hyperkitty-key
                  key: api-key
            - name: MAILMAN_REST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mailman-admin
                  key: password
            - name: MTA
              value: "postfix"
            - name: SMTP_HOST
              value: mailu-front
          ports:
            - name: api
              containerPort: 8001
            - name: lmtp
              containerPort: 8024
          livenessProbe:
            tcpSocket:
              port: api
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 15
          readinessProbe:
            tcpSocket:
              port: api
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 1
          resources:
            requests:
              memory: "200Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: "/opt/mailman/"
              name: data
      volumes:
        - name: config
          configMap:
            name: mailman-core-config
        - name: data
          persistentVolumeClaim:
            claimName: mailman-core-data
---
apiVersion: v1
kind: Secret
metadata:
  name: django-secret
type: Opaque
data:
  secret: {{ include "common.secrets.passwords.manage" (dict "secret" "django-secret" "key" "secret" "providedValues" (list "") "context" $) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mailman-web-config
data:
  settings_local.py: |
    # Configure OpenID SSO provider.
    MAILMAN_WEB_SOCIAL_AUTH = [
        'allauth.socialaccount.providers.openid_connect',
    ]
    SOCIALACCOUNT_PROVIDERS = {
        "openid_connect": {
            "SERVERS": [
                {
                    "id": "local-sso",  # 30 characters or less
                    "name": {{ printf "%s SSO" .Values.org.name | quote }},
                    "server_url": {{ .Values.oidcClient.idpURL | quote }},
                    "APP": {
                        "client_id": {{ .Values.oidcClient.id | quote }},
                        "secret": {{ .Values.oidcClient.secret | quote }},
                    },
                },
            ]
        }
    }
    import sys
    # Configure verbose logging to stdout.
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
                'level': 'INFO',
                'stream': sys.stdout,
            }
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'postorius': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True
            },
        },
        'formatters': {
            'verbose': {
                'format': '%(levelname)s %(asctime)s %(process)d %(name)s %(message)s'
            }
        }
    }
    # As recommended here: https://asynchronous.in/docker-mailman/#setting-up-search-indexing
    HAYSTACK_CONNECTIONS = {
        'default': {
            'ENGINE': 'xapian_backend.XapianEngine',
            'PATH': "/opt/mailman-web-data/fulltext_index",
        },
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mailman-web-uwsgi
data:
  uwsgi.ini: |
    [uwsgi]
    # Port on which uwsgi will be listening.
    uwsgi-socket = 0.0.0.0:8080
    http-socket = 0.0.0.0:8000

    #Enable threading for python
    enable-threads = true

    # Setting uwsgi buffer size to what Apache2 supports.
    buffer-size = 8190

    # Move to the directory wher the django files are.
    chdir = /opt/mailman-web

    # Use the wsgi file provided with the django project.
    wsgi-file = wsgi.py

    # Setup default number of processes and threads per process.
    master = true
    processes = 2
    threads = 2

    # Drop privielges and don't run as root.
    uid = mailman
    gid = mailman

    # Setup the django_q related worker processes.
    attach-daemon = ./manage.py qcluster

    # Setup hyperkitty's cron jobs.
    # 'minutely' jobs are run hourly for perf reasons.
    # See https://github.com/maxking/docker-mailman/issues/327
    unique-cron = 0 -1 -1 -1 -1 ./manage.py runjobs minutely
    unique-cron = -15 -1 -1 -1 -1 ./manage.py runjobs quarter_hourly
    unique-cron = 0 -1 -1 -1 -1 ./manage.py runjobs hourly
    unique-cron = 0 0 -1 -1 -1 ./manage.py runjobs daily
    unique-cron = 0 0 1 -1 -1 ./manage.py runjobs monthly
    unique-cron = 0 0 -1 -1 0 ./manage.py runjobs weekly
    unique-cron = 0 0 1 1 -1 ./manage.py runjobs yearly

    # Setup logging to syslog.
    req-logger = syslog:uwsgi-req
    logger = syslog:uwsgi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mailman-web-data
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "2Gi"
---
apiVersion: v1
kind: Service
metadata:
  name: mailman-web
spec:
  type: ClusterIP
  selector:
    app: mailman-web
  ports:
    - port: 80
      targetPort: ui
      name: ui
    - port: 8080
      targetPort: uwsgi
      name: uwsgi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailman-web
  labels:
    app: mailman-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mailman-web
  template:
    metadata:
      labels:
        app: mailman-web
    spec:
      hostname: mailman-web
      securityContext:
        runAsUser: 100 # should resolve to "mailman" user, may be unstable.
      initContainers:
        - name: copy
          image: busybox:1
          command: ["/bin/sh", "-c", "cp /opt/mailman-web-config/* /opt/mailman-web-data"]
          volumeMounts:
            - mountPath: "/opt/mailman-web-config"
              name: config
            - mountPath: "/opt/mailman-web-data"
              name: data
      containers:
        - name: mailman-web
          image: maxking/mailman-web:0.4
          env:
            - name: SERVE_FROM_DOMAIN
              value: {{ .Values.domains.mailman }}
            - name: DATABASE_URL
              value: {{ printf "postgresql://mailman:%s@postgresql/mailman" (b64dec $pg_user_pw) }}
            - name: DATABASE_TYPE
              value: "postgres"
            - name: HYPERKITTY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: hyperkitty-key
                  key: api-key
            - name: MAILMAN_REST_URL
              value: "http://mailman-core"
            - name: MAILMAN_REST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mailman-admin
                  key: password
            - name: MAILMAN_HOSTNAME
              value: mailman-core
            - name: MAILMAN_ADMIN_USER
              value: {{ .Values.admin.user }}
            - name: MAILMAN_ADMIN_EMAIL
              value: {{ .Values.admin.email }}
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-secret
                  key: secret
            - name: SMTP_HOST
              value: mailu-front
            - name: UWSGI_STATIC_MAP
              value: "/static=/opt/mailman-web-data/static"
          ports:
            - name: ui
              containerPort: 8000
            - name: uwsgi
              containerPort: 8080
          livenessProbe:
            tcpSocket:
              port: ui
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 15
          readinessProbe:
            tcpSocket:
              port: ui
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 1
          resources:
            requests:
              memory: "200Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: "/opt/mailman-web-data"
              name: data
            - mountPath: "/opt/mailman-web/uwsgi.ini"
              name: uwsgi-config
              subPath: "uwsgi.ini"
      volumes:
        - name: config
          configMap:
            name: mailman-web-config
        - name: data
          persistentVolumeClaim:
            claimName: mailman-web-data
        - name: uwsgi-config
          configMap:
            name: mailman-web-uwsgi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mailman
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.clusterIssuer }}
spec:
  tls:
    - hosts:
        - {{ .Values.domains.mailman }}
      secretName: mailman-cert
  rules:
    - host: {{ .Values.domains.mailman }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mailman-web
                port:
                  name: ui
