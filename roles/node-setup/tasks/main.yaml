- name: Load configuration
  ansible.builtin.import_role:
    name: cluster-config
    allow_duplicates: false

- name: Set dynamic facts
  ansible.builtin.set_fact:
    control: "{{ inventory_hostname in groups['control'] }}"
    main_control_node: "{{ groups['control'][0] }}"

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Set hostname to node name (inventory name)
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Increase open file limit to 512
  ansible.posix.sysctl:
    name: fs.inotify.max_user_instances
    value: '512'

- name: Ensure all required system packages are installed
  block:
    - name: Install packages via apt
      when: 'ansible_pkg_mgr == "apt"'
      ansible.builtin.apt:
        state: present
        name:
          - nfs-common
          - wireguard
          - python3
          - python3-pip
          - unzip
        update_cache: true

    - name: Install packages via yum
      when: 'ansible_pkg_mgr == "yum"'
      ansible.builtin.yum:
        state: present
        name:
          - nfs-utils
          - wireguard-tools
          - python3
          - python3-pip
          - unzip
        update_cache: true

    - name: Install packages via apk
      when: 'ansible_pkg_mgr == "apk"'
      community.general.apk:
        state: present
        name:
          - nfs-utils
          - wireguard-tools
          - python3
          - py3-pip
          - unzip
        update_cache: true

    - name: Install packages via dnf
      when: 'ansible_pkg_mgr == "dnf"'
      ansible.builtin.dnf:
        state: present
        name:
          - nfs-utils
          - wireguard-tools
          - python3
          - python3-pip
          - unzip
        update_cache: true

    - name: Install packages via zypper
      when: 'ansible_pkg_mgr == "zypper"'
      community.general.zypper:
        state: present
        name:
          - nfs-utils
          - wireguard-tools
          - python3
          - python3-pip
          - unzip
        update_cache: true

    - name: Install packages via pacman
      when: 'ansible_pkg_mgr == "pacman"'
      community.general.pacman:
        state: present
        name:
          - nfs-utils
          - wireguard-tools
          - python
          - python-pip
          - unzip
        update_cache: true

- name: Disable multipath for all sdx devices
  ansible.builtin.blockinfile:
    path: /etc/multipath.conf
    create: true
    mode: '0644'
    block: |
      blacklist {
          devnode "^sd[a-z0-9]+"
      }
  notify: Restart multipathd

- name: Ensure Tailscale is installed
  when: "cluster.tailscale.enabled"
  block:
    - name: Check if Tailscale is installed
      ansible.builtin.command: "which tailscale"
      register: which_tailscale
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: Download Tailscale install script
      when: "which_tailscale.rc != 0"
      ansible.builtin.get_url:
        url: https://tailscale.com/install.sh
        dest: /tmp/tailscale-install.sh
        mode: "0700"

    - name: Run Tailscale install script
      when: "which_tailscale.rc != 0"
      ansible.builtin.command: /tmp/tailscale-install.sh
      changed_when: true

- name: Configure and install k3s
  block:
    - name: Ensure k3s config dir exists
      ansible.builtin.file:
        path: /etc/rancher/k3s/config.yaml.d/
        state: directory
        mode: '0755'

    - name: Template out k3s config file
      ansible.builtin.template:
        src: k3s-config.yaml
        dest: /etc/rancher/k3s/config.yaml
        mode: '0644'
      notify: Restart k3s

    - name: Template out k3s agent config file
      when: "not control"
      ansible.builtin.template:
        src: k3s-config-agent.yaml
        dest: /etc/rancher/k3s/config.yaml.d/agent.yaml
        mode: '0644'
      notify: Restart k3s

    - name: Template out k3s controlplane config file
      when: "control"
      ansible.builtin.template:
        src: k3s-config-controlplane.yaml
        dest: /etc/rancher/k3s/config.yaml.d/controlplane.yaml
        mode: '0644'
      notify: Restart k3s

    - name: Download k3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: "0700"

    - name: Install k3s via official script
      vars:
        k3s_service: "{{ control | ternary('k3s', 'k3s-agent') }}.service"
      when: "k3s_service not in ansible_facts.services.keys()"
      block:
        - name: Install k3s on first node and download config
          when: "inventory_hostname == main_control_node"
          block:
            - name: Run k3s install script for first control node
              ansible.builtin.command:
                argv:
                  - /tmp/k3s-install.sh
                  - server
              environment:
                K3S_CLUSTER_INIT: "true"
                INSTALL_K3S_VERSION: "{{ k3s_version | ternary(k3s_version, '') }}"
              changed_when: true

            - name: Download join token file
              ansible.builtin.fetch:
                src: /var/lib/rancher/k3s/server/token
                dest: "{{ playbook_dir }}/join-token"
                flat: true

            - name: Wait for Kubernetes API to become available
              environment:
                KUBECONFIG: /etc/rancher/k3s/k3s.yaml
              ansible.builtin.command: kubectl cluster-info
              register: kubectl_info_result
              retries: 6
              delay: 20
              until: "kubectl_info_result is not failed"
              changed_when: false

        - name: Upload config and join additional node
          when: "inventory_hostname != main_control_node"
          block:
            - name: Ensure permanent config dir exists
              ansible.builtin.file:
                path: /etc/k8s-cloud
                state: directory
                mode: '0755'

            - name: Upload join token file
              ansible.builtin.copy:
                src: "{{ playbook_dir }}/join-token"
                dest: /etc/k8s-cloud/k3s-join-token
                mode: '0644'

            - name: Run k3s install script for additional node
              throttle: 1
              any_errors_fatal: true
              ansible.builtin.command:
                argv:
                  - /tmp/k3s-install.sh
                  - "{{ control | ternary('server', 'agent') }}"
              environment:
                K3S_TOKEN_FILE: /etc/k8s-cloud/k3s-join-token
                K3S_URL: "https://{{ hostvars[main_control_node]['ansible_host'] }}:6443"
                INSTALL_K3S_VERSION: "{{ k3s_version | ternary(k3s_version, '') }}"
              changed_when: true
              register: k3s_install_res
              failed_when: false

- name: Configure cgroups for k3s service
  ansible.builtin.include_tasks:
    file: k3s-cgroup-config.yaml

- name: Run control-node-specific setup steps
  when: "control"
  ansible.builtin.include_tasks:
    file: control-node-setup.yaml
