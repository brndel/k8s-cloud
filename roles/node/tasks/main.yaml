- name: Determine the main control host (first to join the cluster)
  ansible.builtin.set_fact:
    main_control_node: "{{ (control_nodes | length > 0) | ternary(control_nodes[0], all_hosts[0]) }}"
  vars:
    all_hosts: "{{ hostvars | dict2items | map(attribute='value.ansible_host') }}"
    control_nodes: "{{ hostvars | dict2items | selectattr('value.control_node', 'eq', true) | map(attribute='value.ansible_host') }}"

- name: Pick the correct names for system packages to be installed
  block:
    - name: Set sys package names for apt
      when: 'ansible_pkg_mgr == "apt"'
      ansible.builtin.set_fact:
        system_packages:
          - nfs-common
          - wireguard
    - name: Set sys package names for other package managers
      when: 'ansible_pkg_mgr in ["yum", "apk", "dnf", "zypper", "pacman"]'
      ansible.builtin.set_fact:
        system_packages:
          - nfs-utils
          - wireguard-tools

- name: Ensure all required system packages are installed
  block:
    - name: Install packages via apt
      when: 'ansible_pkg_mgr == "apt"'
      ansible.builtin.apt:
        state: present
        name: '{{ system_packages }}'
        update_cache: true

    - name: Install packages via yum
      when: 'ansible_pkg_mgr == "yum"'
      ansible.builtin.yum:
        state: present
        name: '{{ system_packages }}'
        update_cache: true

    - name: Install packages via apk
      when: 'ansible_pkg_mgr == "apk"'
      community.general.apk:
        state: present
        name: '{{ system_packages }}'
        update_cache: true

    - name: Install packages via dnf
      when: 'ansible_pkg_mgr == "dnf"'
      ansible.builtin.dnf:
        state: present
        name: '{{ system_packages }}'
        update_cache: true

    - name: Install packages via zypper
      when: 'ansible_pkg_mgr == "zypper"'
      community.general.zypper:
        state: present
        name: '{{ system_packages }}'
        update_cache: true

    - name: Install packages via pacman
      when: 'ansible_pkg_mgr == "pacman"'
      community.general.pacman:
        state: present
        name: '{{ system_packages }}'
        update_cache: true

- name: Install k3s via official setup script # TODO: remove third-party ansible role and use k3s setup script
  block:
    - name: Ensure k3s config dir exists
      ansible.builtin.file:
        path: /etc/rancher/k3s/config.yaml.d/
        state: directory
        mode: '0755'

    - name: Template out k3s config file
      ansible.builtin.template:
        src: k3s-config.yaml
        dest: /etc/rancher/k3s/config.yaml.d/main.yaml
        mode: '0644'

    - name: Template out k3s controlplane config file
      when: "control_node"
      ansible.builtin.template:
        src: k3s-config-controlplane.yaml
        dest: /etc/rancher/k3s/config.yaml.d/controlplane.yaml
        mode: '0644'

    - name: Download k3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: "0700"

    - name: Install k3s on first node and download config
      when: "ansible_host == main_control_node"
      block:
        - name: Run k3s install script for first control node
          ansible.builtin.command:
            argv:
              - /tmp/k3s-install.sh
              - server
          environment:
            K3S_CLUSTER_INIT: "true"
          changed_when: true

        - name: Copy default kubeconfig file
          ansible.builtin.copy:
            remote_src: true
            src: /etc/rancher/k3s/k3s.yaml
            dest: /tmp/kubeconfig.yaml
            mode: '0644'

        - name: Change server address of copied kubeconfig to public IP
          ansible.builtin.command:
            argv:
              - kubectl
              - config
              - set-cluster
              - default
              - "--server=https://{{ ansible_host }}:6443"
          environment:
            KUBECONFIG: /tmp/kubeconfig.yaml
          changed_when: true

        - name: Download kubeconfig file
          ansible.builtin.fetch:
            src: /tmp/kubeconfig.yaml
            dest: "{{ playbook_dir }}/kubeconfig.yaml"
            flat: true

        - name: Download join token file
          ansible.builtin.fetch:
            src: /var/lib/rancher/k3s/server/token
            dest: "{{ playbook_dir }}/join-token"
            flat: true

    - name: Upload config and join additional node
      when: "ansible_host != main_control_node"
      block:
        - name: Upload join token file
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/join-token"
            dest: /tmp/k3s-join-token
            mode: '0644'

        - name: Run k3s install script for additional node
          ansible.builtin.command:
            argv:
              - /tmp/k3s-install.sh
              - "{{ control_node | ternary('server', 'agent') }}"
          environment:
            K3S_TOKEN_FILE: /tmp/k3s-join-token
            K3S_URL: "https://{{ main_control_node }}:6443"
          changed_when: true

- name: Run control-node-specific setup steps
  when: "control_node"
  ansible.builtin.include_tasks:
    file: control-node-setup.yaml
