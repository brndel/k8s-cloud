- name: Set dynamic facts
  ansible.builtin.set_fact:
    cluster_fqn: "cluster.{{ domain }}"
    charts_dir: "{{ playbook_dir }}/charts"

- name: Ensure FluxCD is deployed
  kubernetes.core.helm:
    wait: true
    timeout: 10m
    name: fluxcd
    release_namespace: flux-system
    create_namespace: true
    chart_repo_url: https://fluxcd-community.github.io/helm-charts
    chart_ref: flux2
    chart_version: "^2"
    values:
      policies:
        create: false

- name: Ensure base GitRepository exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: source.toolkit.fluxcd.io/v1
      kind: GitRepository
      metadata:
        name: base-repo
        namespace: flux-system
      spec:
        interval: 1h
        url: "{{ base_repo }}"
        ref:
          branch: "{{ base_branch }}"

- name: Reconcile base git repo
  ansible.builtin.command: "flux reconcile source git base-repo -n flux-system"
  changed_when: true

- name: Bootstrap host-cluster infrastructure
  when: "not vcluster"
  ansible.builtin.include_tasks:
    file: bootstrap-chart.yaml
    apply:
      vars:
        chart: "{{ item }}"
  loop:
    - name: storage-stack
      namespace: longhorn-system

- name: Setup vcluster
  when: "vcluster"
  block:
    - name: Create vcluster for domain
      kubernetes.core.helm:
        wait: true
        name: "{{ cluster_fqn }}"
        release_namespace: "{{ cluster_fqn }}"
        chart_repo_url: https://charts.loft.sh
        chart_ref: vcluster
        chart_version: "^0.15"
        values:
          sync:
            persistentvolumes:
              enabled: true
            storageclasses:
              enabled: true
            volumesnapshots:
              enabled: true
            nodes:
              enabled: true
              enableScheduler: true
              nodeSelector: "{{ cluster_fqn }}=1"
          isolation:
            enabled: true
          proxy:
            metricsServer:
              nodes:
                enabled: true
              pods:
                enabled: true

    - name: Switch kubecontext to vcluster
      ansible.builtin.command: "vcluster connect {{ cluster_fqn }}"
      changed_when: true

- name: Bootstrap cluster infrastructure
  ansible.builtin.include_tasks:
    file: bootstrap-chart.yaml
    apply:
      vars:
        chart: "{{ item }}"
  loop:
    - name: cert-stack
      namespace: cert-system
    - name: ingress-stack
      namespace: ingress-system
    - name: telemetry-stack
      namespace: telemetry-system
    - name: cicd-stack
      namespace: flux-system

- name: Ensure all required secrets exist
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}"
        namespace: kube-system
      type: Opaque
      data:
        secret: "{{ vars[item.inventoryKey] | b64encode }}"
  loop:
    - inventoryKey: admin_idp_client_secret
      name: admin-idp-client
    - inventoryKey: smtp_password
      name: smtp
    - inventoryKey: s3_access_key_secret
      name: s3
    - inventoryKey: external_dns_token
      name: external-dns

- name: Ensure HelmReleases for host-cluster infrastructure exist
  when: "not vcluster"
  ansible.builtin.include_tasks:
    file: deploy-chart.yaml
    apply:
      vars:
        chart: "{{ item }}"
  loop:
    - name: upgrade-controller
      namespace: kube-system
      values: {}

    - name: storage-stack
      namespace: longhorn-system
      values:
        host: "{{ subdomains.storage }}.{{ domain }}"
        oauth2_proxy_host: "{{ subdomains.auth }}.{{ domain }}"
        admin_group: "{{ admin_group }}"
        s3: "{{ s3 | combine({'accessKeySecret': {'name': 's3', 'namespace': 'kube-system', 'key': 'secret'}, 'bucket': s3_buckets.backup}) }}"

    - name: backup-stack
      namespace: backup-system
      values:
        s3: "{{ s3 | combine({'accessKeySecret': {'name': 's3', 'namespace': 'kube-system', 'key': 'secret'}, 'bucket': s3_buckets.backup}) }}"

- name: Apply backup restoration
  when: "restore_from_backup"
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: velero.io/v1
      kind: Restore
      metadata:
        name: initial-cluster-restore
        namespace: backup-system
      spec:
        backupName: "{{ restore_from_backup }}"

- name: Ensure HelmReleases for cluster infrastructure exist
  ansible.builtin.include_tasks:
    file: deploy-chart.yaml
    apply:
      vars:
        chart: "{{ item }}"
  loop:
    - name: admin-rbac
      namespace: kube-system
      values:
        admin_group: "{{ admin_group }}"

    - name: crypto-storage
      namespace: longhorn-system
      values:
        cluster_fqn: "{{ cluster_fqn }}"

    - name: cert-stack
      namespace: cert-system
      values: {}

    - name: ingress-stack
      namespace: ingress-system
      values:
        domain: "{{ domain }}"
        cluster_name: "{{ cluster_name }}"
        external_dns:
          token_secret:
            namespace: kube-system
            name: external-dns
            key: secret

    - name: sso-stack
      namespace: sso-system
      values:
        domain: "{{ domain }}"
        org: "{{ org }}"
        hosts:
          keycloak: "{{ subdomains.idp }}.{{ domain }}"
          dex: "{{ subdomains.oidc }}.{{ domain }}"
        clients:
          oidc:
            - id: cluster-oidc
              redirect_uris:
                - "https://{{ subdomains.auth }}.{{ domain }}/oauth2/callback"
                - "https://{{ subdomains.telemetry }}.{{ domain }}/login/generic_oauth"
                - "https://{{ subdomains.gitops }}.{{ domain }}/oauth2/callback"
                - "http://localhost:8000/"
        smtp: "{{ smtp | combine({'password_secret': {'name': 'smtp', 'namespace': 'kube-system', 'key': 'secret'}}) }}"
        admin_idp: "{{ admin_idp | combine({'client_secret': {'name': 'admin-idp-client', 'namespace': 'kube-system', 'key': 'secret'}}) }}"
        admin_group: "{{ admin_group }}"

    - name: authproxy
      namespace: sso-system
      values:
        domain: "{{ domain }}"
        org: "{{ org }}"
        host: "{{ subdomains.auth }}.{{ domain }}"
        oidc_client:
          idp_url: "https://{{ subdomains.idp }}.{{ domain }}/realms/master"
          id: "cluster-oidc"
          secret:
            namespace: sso-system
            name: "oidc-client.cluster-oidc"
            key: secret

    - name: telemetry-stack
      namespace: telemetry-system
      values:
        domain: "{{ domain }}"
        org: "{{ org }}"
        host: "{{ subdomains.telemetry }}.{{ domain }}"
        oidc_client:
          idp_url: "https://{{ subdomains.idp }}.{{ domain }}/realms/master"
          id: "cluster-oidc"
          secret:
            namespace: sso-system
            name: "oidc-client.cluster-oidc"
            key: secret
        admin_email: "{{ admin_email }}"
        admin_group: "{{ admin_group }}"
        s3: "{{ s3 | combine({'accessKeySecret': {'name': 's3', 'namespace': 'kube-system', 'key': 'secret'}, 'bucket': s3_buckets.logs}) }}"
        smtp: "{{ smtp | combine({'password_secret': {'name': 'smtp', 'namespace': 'kube-system', 'key': 'secret'}}) }}"
        node_endpoints: "{{ groups['all'] }}"

    - name: cicd-stack
      namespace: flux-system
      values:
        host: "{{ subdomains.gitops }}.{{ domain }}"
        oidc_client:
          idp_url: "https://{{ subdomains.idp }}.{{ domain }}/realms/master"
          id: "cluster-oidc"
          secret:
            namespace: sso-system
            name: "oidc-client.cluster-oidc"
            key: secret

    - name: control-stack
      namespace: kube-system
      values:
        host: "{{ subdomains.control }}.{{ domain }}"
        oauth2_proxy_host: "{{ subdomains.auth }}.{{ domain }}"
        admin_group: "{{ admin_group }}"
