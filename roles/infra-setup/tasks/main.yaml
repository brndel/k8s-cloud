- name: Bootstrap host-cluster infrastructure
  when: "not vcluster and (k8s_baseline_release.resources | length) == 0"
  block:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item.namespace }}"

    - name: Deploy helm chart in bootstrap mode
      kubernetes.core.helm:
        wait: true
        name: "{{ item.chart }}"
        release_namespace: "{{ item.namespace }}"
        chart_ref: "charts/{{ item.chart }}"
        values:
          bootstrap: true

  with_items:
    - chart: storage-stack
      namespace: longhorn-system

- name: Setup vcluster
  when: vcluster
  block:
    - name: Create vcluster for domain
      kubernetes.core.helm:
        wait: true
        name: "{{ clusterFQN }}"
        release_namespace: "{{ clusterFQN }}"
        chart_repo_url: https://charts.loft.sh
        chart_ref: vcluster
        chart_version: "^0.15"
        values:
          sync:
            persistentvolumes:
              enabled: true
            storageclasses:
              enabled: true
            volumesnapshots:
              enabled: true
            nodes:
              enabled: true
              enableScheduler: true
              nodeSelector: "{{ clusterFQN }}=1"
          isolation:
            enabled: true
          proxy:
            metricsServer:
              nodes:
                enabled: true
              pods:
                enabled: true

    - name: Switch kubecontext to vcluster
      ansible.builtin.shell: "vcluster connect {{ clusterFQN }}"

- name: Bootstrap cluster infrastructure
  block:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item.namespace }}"

    - name: Deploy helm chart in bootstrap mode
      kubernetes.core.helm:
        wait: true
        name: "{{ item.chart }}"
        release_namespace: "{{ item.namespace }}"
        chart_ref: "charts/{{ item.chart }}"
        values:
          bootstrap: true

  with_items:
    - chart: cert-manager
      namespace: kube-system
    - chart: ingress-stack
      namespace: ingress-system
    - chart: telemetry-stack
      namespace: telemetry-system
    - chart: cicd-stack
      namespace: flux-system

- name: Ensure base GitRepository exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: source.toolkit.fluxcd.io/v1
      kind: GitRepository
      metadata:
        name: base-repo
        namespace: flux-system
      spec:
        interval: 1h
        url: "{{ baseRepo }}"
        ref:
          branch: "{{ baseBranch }}"

- name: Ensure admin IDP client secret exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: admin-idp-client
        namespace: kube-system
      type: Opaque
      data:
        secret: "{{ adminIDPClientSecret }}"

- name: Ensure external DNS token secret exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: external-dns
        namespace: kube-system
      type: Opaque
      data:
        token: "{{ externalDNSToken }}"

- name: Ensure SMTP secret exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: smtp
        namespace: kube-system
      type: Opaque
      data:
        password: "{{ smtpPassword }}"

- name: Ensure S3 secret exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: s3
        namespace: kube-system
      type: Opaque
      data:
        secret: "{{ s3AccessKeySecret }}"

- name: Ensure HelmRelease for storage-stack exists
  when: "not vcluster"
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: storage-stack
        namespace: longhorn-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/storage-stack"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          host: "{{ subdomains.storage }}.{{ domain }}"
          oauth2ProxyHost: "{{ subdomains.auth }}.{{ domain }}"
          adminGroup: "{{ adminGroup }}"
          s3: "{{ s3 | combine({'accessKeySecret': {'name': 's3', 'namespace': 'kube-system'}, 'bucket': s3Buckets.backup}) }}"

- name: Ensure backup-system exists
  when: "not vcluster"
  block:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "backup-system"

    - name: Deploy backup-stack
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: helm.toolkit.fluxcd.io/v2beta1
          kind: HelmRelease
          metadata:
            name: backup-stack
            namespace: backup-system
          spec:
            interval: 1h
            chart:
              spec:
                chart: "./charts/backup-stack"
                sourceRef:
                  kind: GitRepository
                  name: base-repo
                reconcileStrategy: Revision
            values:
              s3: "{{ s3 | combine({'accessKeySecret': {'name': 's3', 'namespace': 'kube-system'}, 'bucket': s3Buckets.backup}) }}"

    - name: Apply backup restoration
      when: "restoreFromBackup is defined"
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: velero.io/v1
          kind: Restore
          metadata:
            name: initial-cluster-restore
            namespace: backup-system
          spec:
            backupName: "{{ restoreFromBackup }}"

- name: Ensure HelmRelease for upgrade-controller exists
  when: "not vcluster"
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: upgrade-controller
        namespace: kube-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/upgrade-controller"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision

- name: Ensure HelmRelease for admin RBAC exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: admin-rbac
        namespace: kube-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/admin-rbac"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          adminGroup: "{{ adminGroup }}"

- name: Ensure HelmRelease for encrypted storage class exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: crypto-storage
        namespace: longhorn-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/crypto-storage"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          clusterFQN: "{{ clusterFQN }}"

- name: Ensure HelmRelease for cert-manager exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: cert-manager
        namespace: kube-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/cert-manager"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision

- name: Ensure HelmRelease for ingress-stack exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: ingress-stack
        namespace: ingress-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/ingress-stack"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          domain: "{{ domain }}"
          clusterName: "{{ clusterName }}"
          externalDNS: "{{ externalDNS | combine({'tokenSecret': {'name': 'external-dns', 'namespace': 'kube-system'}}) }}"

- name: Ensure sso-system exists
  block:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "sso-system"

    - name: Deploy sso-stack
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: helm.toolkit.fluxcd.io/v2beta1
          kind: HelmRelease
          metadata:
            name: sso-stack
            namespace: sso-system
          spec:
            interval: 1h
            chart:
              spec:
                chart: "./charts/sso-stack"
                sourceRef:
                  kind: GitRepository
                  name: base-repo
                reconcileStrategy: Revision
            values:
              domain: "{{ domain }}"
              org: "{{ org }}"
              hosts:
                keycloak: "{{ subdomains.idp }}.{{ domain }}"
                dex: "{{ subdomains.oidc }}.{{ domain }}"
              clients:
                oidc:
                  - id: cluster-oidc
                    redirectURIs:
                      - "https://{{ subdomains.auth }}.{{ domain }}/oauth2/callback"
                      - "http://localhost:8000/"
                      - "https://*.{{ domain }}/*"
              smtp: "{{ smtp | combine({'passwordSecret': {'name': 'smtp', 'namespace': 'kube-system'}}) }}"
              adminIDP: "{{ adminIDP | combine({'clientSecret': {'name': 'admin-idp-client', 'namespace': 'kube-system'}}) }}"

    - name: Deploy authproxy
      kubernetes.core.k8s:
        wait: true
        definition:
          apiVersion: helm.toolkit.fluxcd.io/v2beta1
          kind: HelmRelease
          metadata:
            name: authproxy
            namespace: sso-system
          spec:
            interval: 1h
            chart:
              spec:
                chart: "./charts/authproxy"
                sourceRef:
                  kind: GitRepository
                  name: base-repo
                reconcileStrategy: Revision
            values:
              domain: "{{ domain }}"
              org: "{{ org }}"
              host: "{{ subdomains.auth }}.{{ domain }}"
              oidcClient:
                idpURL: "https://{{ subdomains.idp }}.{{ domain }}/realms/main"
                id: "cluster-oidc"
                secret:
                  name: "oidc-client.cluster-oidc"

- name: Ensure HelmRelease for telemetry-stack exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: telemetry-stack
        namespace: telemetry-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/telemetry-stack"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          domain: "{{ domain }}"
          org: "{{ org }}"
          host: "{{ subdomains.telemetry }}.{{ domain }}"
          oidcClient:
            idpURL: "https://{{ subdomains.idp }}.{{ domain }}/realms/main"
            id: "cluster-oidc"
            secret:
              name: "oidc-client.cluster-oidc"
          adminEmail: "{{ adminEmail }}"
          adminGroup: "{{ adminGroup }}"
          s3: "{{ s3 | combine({'accessKeySecret': {'name': 's3', 'namespace': 'kube-system'}, 'bucket': s3Buckets.logs}) }}"
          smtp: "{{ smtp | combine({'passwordSecret': {'name': 'smtp', 'namespace': 'kube-system'}}) }}"

- name: Ensure HelmRelease for cicd-stack exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: cicd-stack
        namespace: flux-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/cicd-stack"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          host: "{{ subdomains.gitops }}.{{ domain }}"
          oidcClient:
            idpURL: "https://{{ subdomains.idp }}.{{ domain }}/realms/main"
            id: "cluster-oidc"
            secret:
              name: "oidc-client.cluster-oidc"

- name: Ensure HelmRelease for k8s-dashboard exists
  kubernetes.core.k8s:
    wait: true
    definition:
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: k8s-dashboard
        namespace: kube-system
      spec:
        interval: 1h
        chart:
          spec:
            chart: "./charts/k8s-dashboard"
            sourceRef:
              kind: GitRepository
              name: base-repo
            reconcileStrategy: Revision
        values:
          host: "{{ subdomains.control }}.{{ domain }}"
          oauth2ProxyHost: "{{ subdomains.auth }}.{{ domain }}"
          adminGroup: "{{ adminGroup }}"

- name: Get secret for cluster oidc client
  ansible.builtin.command:
    argv:
      - kubectl
      - get
      - secret
      - oidc-client.cluster-oidc
      - -o=jsonpath='{.data.secret}'
  register: oidc_client_secret

- name: Add oidc login to kubeconfig
  ansible.builtin.command:
    argv:
      - kubectl
      - config
      - set-credentials
      - oidc
      - --exec-api-version=client.authentication.k8s.io/v1beta1
      - --exec-command=kubectl
      - --exec-arg=oidc-login
      - --exec-arg=get-token
      - "--exec-arg=--oidc-issuer-url=https://{{ subdomains.oidc }}.{{ domain }}"
      - --exec-arg=--oidc-client-id=cluster-oidc
      - "--exec-arg=--oidc-client-secret={{ oidc_client_secret | b64decode }}"

- name: Download oidc kubeconfig file
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ playbook_dir }}/kubeconfig-oidc.yaml"
